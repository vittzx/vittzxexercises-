1 - Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit
integer range [-231, 231 - 1], then return 0.

------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def reverse(self, x: int) -> int:
        a = []
        if (x>= 0):
            c = [a.append(n) for n in str(x)]
            if len(str(x)) != 1:
                if a[-1] == 0:
                    del a[-1]
            # a = list(map(lambda x: str(x), a))
            if int("".join(a)[::-1]) > ((2**31) -1): return 0 
            else:
                return int("".join(a)[::-1])
                
        else:
            c = [a.append(n) for n in str(x)]
            if len(str(x)) != 1:
                if a[-1] == 0:
                    del a[-1]
            del a[0]
            # a = list(map(lambda x: str(x), a))
            if int(f'{-int("".join(a)[::-1])}') < (-2 **31):
                return 0 
            else:
                return int(f'{-int("".join(a)[::-1])}')
---------------------------------------------------------------------------------------
Given an integer x, return true if x is a palindrome, and false otherwise.
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

def isPalindrome(x:int) -> bool:
    y = x
    if str(x)[::-1] == str(y):
        return True 
    else: False
    
